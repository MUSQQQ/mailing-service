// Code generated by counterfeiter. DO NOT EDIT.
package servicefakes

import (
	"mailing-service/service"
	"sync"
)

type FakeDBInterface struct {
	CreateMailingDetailsStub        func(*service.MailingDetails) error
	createMailingDetailsMutex       sync.RWMutex
	createMailingDetailsArgsForCall []struct {
		arg1 *service.MailingDetails
	}
	createMailingDetailsReturns struct {
		result1 error
	}
	createMailingDetailsReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteMailingDetailsStub        func([]string) error
	deleteMailingDetailsMutex       sync.RWMutex
	deleteMailingDetailsArgsForCall []struct {
		arg1 []string
	}
	deleteMailingDetailsReturns struct {
		result1 error
	}
	deleteMailingDetailsReturnsOnCall map[int]struct {
		result1 error
	}
	GetMailingDetailsByMailingIDStub        func(int) ([]*service.MailingDetails, error)
	getMailingDetailsByMailingIDMutex       sync.RWMutex
	getMailingDetailsByMailingIDArgsForCall []struct {
		arg1 int
	}
	getMailingDetailsByMailingIDReturns struct {
		result1 []*service.MailingDetails
		result2 error
	}
	getMailingDetailsByMailingIDReturnsOnCall map[int]struct {
		result1 []*service.MailingDetails
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDBInterface) CreateMailingDetails(arg1 *service.MailingDetails) error {
	fake.createMailingDetailsMutex.Lock()
	ret, specificReturn := fake.createMailingDetailsReturnsOnCall[len(fake.createMailingDetailsArgsForCall)]
	fake.createMailingDetailsArgsForCall = append(fake.createMailingDetailsArgsForCall, struct {
		arg1 *service.MailingDetails
	}{arg1})
	stub := fake.CreateMailingDetailsStub
	fakeReturns := fake.createMailingDetailsReturns
	fake.recordInvocation("CreateMailingDetails", []interface{}{arg1})
	fake.createMailingDetailsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDBInterface) CreateMailingDetailsCallCount() int {
	fake.createMailingDetailsMutex.RLock()
	defer fake.createMailingDetailsMutex.RUnlock()
	return len(fake.createMailingDetailsArgsForCall)
}

func (fake *FakeDBInterface) CreateMailingDetailsCalls(stub func(*service.MailingDetails) error) {
	fake.createMailingDetailsMutex.Lock()
	defer fake.createMailingDetailsMutex.Unlock()
	fake.CreateMailingDetailsStub = stub
}

func (fake *FakeDBInterface) CreateMailingDetailsArgsForCall(i int) *service.MailingDetails {
	fake.createMailingDetailsMutex.RLock()
	defer fake.createMailingDetailsMutex.RUnlock()
	argsForCall := fake.createMailingDetailsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDBInterface) CreateMailingDetailsReturns(result1 error) {
	fake.createMailingDetailsMutex.Lock()
	defer fake.createMailingDetailsMutex.Unlock()
	fake.CreateMailingDetailsStub = nil
	fake.createMailingDetailsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDBInterface) CreateMailingDetailsReturnsOnCall(i int, result1 error) {
	fake.createMailingDetailsMutex.Lock()
	defer fake.createMailingDetailsMutex.Unlock()
	fake.CreateMailingDetailsStub = nil
	if fake.createMailingDetailsReturnsOnCall == nil {
		fake.createMailingDetailsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createMailingDetailsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDBInterface) DeleteMailingDetails(arg1 []string) error {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.deleteMailingDetailsMutex.Lock()
	ret, specificReturn := fake.deleteMailingDetailsReturnsOnCall[len(fake.deleteMailingDetailsArgsForCall)]
	fake.deleteMailingDetailsArgsForCall = append(fake.deleteMailingDetailsArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	stub := fake.DeleteMailingDetailsStub
	fakeReturns := fake.deleteMailingDetailsReturns
	fake.recordInvocation("DeleteMailingDetails", []interface{}{arg1Copy})
	fake.deleteMailingDetailsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDBInterface) DeleteMailingDetailsCallCount() int {
	fake.deleteMailingDetailsMutex.RLock()
	defer fake.deleteMailingDetailsMutex.RUnlock()
	return len(fake.deleteMailingDetailsArgsForCall)
}

func (fake *FakeDBInterface) DeleteMailingDetailsCalls(stub func([]string) error) {
	fake.deleteMailingDetailsMutex.Lock()
	defer fake.deleteMailingDetailsMutex.Unlock()
	fake.DeleteMailingDetailsStub = stub
}

func (fake *FakeDBInterface) DeleteMailingDetailsArgsForCall(i int) []string {
	fake.deleteMailingDetailsMutex.RLock()
	defer fake.deleteMailingDetailsMutex.RUnlock()
	argsForCall := fake.deleteMailingDetailsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDBInterface) DeleteMailingDetailsReturns(result1 error) {
	fake.deleteMailingDetailsMutex.Lock()
	defer fake.deleteMailingDetailsMutex.Unlock()
	fake.DeleteMailingDetailsStub = nil
	fake.deleteMailingDetailsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDBInterface) DeleteMailingDetailsReturnsOnCall(i int, result1 error) {
	fake.deleteMailingDetailsMutex.Lock()
	defer fake.deleteMailingDetailsMutex.Unlock()
	fake.DeleteMailingDetailsStub = nil
	if fake.deleteMailingDetailsReturnsOnCall == nil {
		fake.deleteMailingDetailsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteMailingDetailsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDBInterface) GetMailingDetailsByMailingID(arg1 int) ([]*service.MailingDetails, error) {
	fake.getMailingDetailsByMailingIDMutex.Lock()
	ret, specificReturn := fake.getMailingDetailsByMailingIDReturnsOnCall[len(fake.getMailingDetailsByMailingIDArgsForCall)]
	fake.getMailingDetailsByMailingIDArgsForCall = append(fake.getMailingDetailsByMailingIDArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.GetMailingDetailsByMailingIDStub
	fakeReturns := fake.getMailingDetailsByMailingIDReturns
	fake.recordInvocation("GetMailingDetailsByMailingID", []interface{}{arg1})
	fake.getMailingDetailsByMailingIDMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDBInterface) GetMailingDetailsByMailingIDCallCount() int {
	fake.getMailingDetailsByMailingIDMutex.RLock()
	defer fake.getMailingDetailsByMailingIDMutex.RUnlock()
	return len(fake.getMailingDetailsByMailingIDArgsForCall)
}

func (fake *FakeDBInterface) GetMailingDetailsByMailingIDCalls(stub func(int) ([]*service.MailingDetails, error)) {
	fake.getMailingDetailsByMailingIDMutex.Lock()
	defer fake.getMailingDetailsByMailingIDMutex.Unlock()
	fake.GetMailingDetailsByMailingIDStub = stub
}

func (fake *FakeDBInterface) GetMailingDetailsByMailingIDArgsForCall(i int) int {
	fake.getMailingDetailsByMailingIDMutex.RLock()
	defer fake.getMailingDetailsByMailingIDMutex.RUnlock()
	argsForCall := fake.getMailingDetailsByMailingIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDBInterface) GetMailingDetailsByMailingIDReturns(result1 []*service.MailingDetails, result2 error) {
	fake.getMailingDetailsByMailingIDMutex.Lock()
	defer fake.getMailingDetailsByMailingIDMutex.Unlock()
	fake.GetMailingDetailsByMailingIDStub = nil
	fake.getMailingDetailsByMailingIDReturns = struct {
		result1 []*service.MailingDetails
		result2 error
	}{result1, result2}
}

func (fake *FakeDBInterface) GetMailingDetailsByMailingIDReturnsOnCall(i int, result1 []*service.MailingDetails, result2 error) {
	fake.getMailingDetailsByMailingIDMutex.Lock()
	defer fake.getMailingDetailsByMailingIDMutex.Unlock()
	fake.GetMailingDetailsByMailingIDStub = nil
	if fake.getMailingDetailsByMailingIDReturnsOnCall == nil {
		fake.getMailingDetailsByMailingIDReturnsOnCall = make(map[int]struct {
			result1 []*service.MailingDetails
			result2 error
		})
	}
	fake.getMailingDetailsByMailingIDReturnsOnCall[i] = struct {
		result1 []*service.MailingDetails
		result2 error
	}{result1, result2}
}

func (fake *FakeDBInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMailingDetailsMutex.RLock()
	defer fake.createMailingDetailsMutex.RUnlock()
	fake.deleteMailingDetailsMutex.RLock()
	defer fake.deleteMailingDetailsMutex.RUnlock()
	fake.getMailingDetailsByMailingIDMutex.RLock()
	defer fake.getMailingDetailsByMailingIDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDBInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ service.DBInterface = new(FakeDBInterface)
